--
-- The Commstime benchmark was invented by Peter Welch (University
-- of Kent at Canterbury) and is shown in outline here, in occam.
-- Clearly, the occam version is much more succinct and clear than
-- the equivalent C. If you would like to know more, visit the website
-- for the Kent occam compiler (Kroc).
--                    http://wotug.ukc.ac.uk/kroc/
-- If Kroc is installed and the environment variable KROC_HOME is
-- defined, then you will be able to compile and run this program.
-- You may be impressed by how much faster it runs than the libcsp
-- version!
--
-- $Id: commstime.occ,v 1.1.1.1 2001/06/12 13:55:27 rickbeton Exp $
--

#USE "course.lib"

PROC comms.time (CHAN OF BYTE keyboard, screen, error)

  --{{{  PROC seq.delta (CHAN OF INT in, out.0, out.1)
  PROC seq.delta (CHAN OF INT in, out.0, out.1)
    WHILE TRUE
      INT n:
      SEQ
        in ? n
        out.0 ! n
        out.1 ! n
  :
  --}}}  

  --{{{  PROC consume (VAL INT n.loops, CHAN OF INT in, CHAN OF BYTE out)
  PROC consume (VAL INT n.loops, CHAN OF INT in, CHAN OF BYTE out)
    TIMER tim:
    INT t0, t1:
    INT value:
    SEQ
      --{{{  warm-up loop
      VAL INT warm.up IS 16:
      SEQ i = 0 FOR warm.up
        in ? value
      --}}}  
      WHILE TRUE
        SEQ
          tim ? t0
          --{{{  bench-mark loop
          SEQ i = 0 FOR n.loops
            in ? value
          --}}}  
          tim ? t1
          --{{{  report
          VAL INT microsecs IS t1 MINUS t0:
          VAL INT64 nanosecs IS 1000 * (INT64 microsecs):
          SEQ
            out.string ("Last value received = ", 0, out)
            out.number (value, 0, out)
            out.string ("*c*n", 0, out)
            out.string ("Time = ", 0, out)
            out.number (microsecs, 0, out)
            out.string (" microsecs*c*n", 0, out)
            out.string ("Time per loop = ", 0, out)
            out.number (INT (nanosecs/(INT64 n.loops)), 0, out)
            out.string (" nanosecs*c*n", 0, out)
            out.string ("Context switch = ", 0, out)
            out.number (INT ((nanosecs/(INT64 n.loops))/8), 0, out)
            out.string (" nanosecs*c*n*n", 0, out)
          --}}}  
  :
  --}}}  

  BOOL use.seq.delta:

  SEQ

    --{{{  announce
    SEQ
      out.string ("*c*nCommstime in occam ...*c*n*n", 0, screen)
      out.string ("Using the SEQ-output version of the delta process*c*n", 0, screen)
      out.string ("yields a more accurate measure of context-switch time*c*n*n", 0, screen)
      out.string ("Using the PAR-output version carries an extra overhead*c*n", 0, screen)
      out.string ("of one process startup/shutdown per Commstime loop*c*n*n", 0, screen)
      out.string ("By comparing **loop** times between the SEQ and PAR versions,*c*n", 0, screen)
      out.string ("the process startup/shutdown overhead may be deduced*c*n*n", 0, screen)
    --}}}  

    ask.bool ("Sequential delta? ", use.seq.delta, keyboard, screen)
    out.string ("*nCommstime starting ...*c*n*n", 0, screen)

    CHAN OF INT a, b, c, d:
    PAR
      prefix (0, b, a)
      IF
        use.seq.delta
          seq.delta (a, c, d)    -- the one defined above
        TRUE
          delta (a, c, d)        -- the one that does a parallel output
      succ (c, b)
      consume (10000000, d, screen)

:


